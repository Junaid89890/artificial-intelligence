import heapq

def a_star_algorithm(start, goal, h):
    def f(n):
        return g[n] + h[n]

    g = {start: 0}
    open_list = [start]
    heapq.heapify(open_list)
    came_from = {}

    while open_list:
        current = heapq.heappop(open_list)
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]

        for neighbor, cost in neighbors[current]:
            tentative_g_score = g[current] + cost
            if neighbor not in g or tentative_g_score < g[neighbor]:
                g[neighbor] = tentative_g_score
                f_score = f(neighbor)
                heapq.heappush(open_list, neighbor)
                came_from[neighbor] = current
    return None

start = 'A'
goal = 'E'
h = {'A': 7, 'B': 6, 'C': 2, 'D': 1, 'E': 0}
neighbors = {
    'A': [('B', 1), ('C', 4)],
    'B': [('A', 1), ('C', 2), ('D', 5)],
    'C': [('A', 4), ('B', 2), ('E', 3)],
    'D': [('B', 5), ('E', 1)],
    'E': [('C', 3), ('D', 1)]
}
print(a_star_algorithm(start, goal, h))
