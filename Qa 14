def alpha_beta_pruning(board, depth, alpha, beta, maximizing_player):
    winner = check_winner(board)
    if winner == 'X':
        return 1
    elif winner == 'O':
        return -1
    elif depth == 0 or all(board[i][j] != ' ' for i in range(3) for j in range(3)):
        return 0

    if maximizing_player:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = alpha_beta_pruning(board, depth-1, alpha, beta, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = alpha_beta_pruning(board, depth-1, alpha, beta, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def best_move_alpha_beta(board):
    best_val = float('-inf')
    move = (-1, -1)
    alpha = float('-inf')
    beta = float('inf')
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                move_val = alpha_beta_pruning(board, 9, alpha, beta, False)
                board[i][j] = ' '
                if move_val > best_val:
                    move = (i, j)
                    best_val = move_val
    return move

def play_game_with_alpha_beta():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    while True:
        print_board(board)
        row, col = best_move_alpha_beta(board)
        board[row][col] = 'X'
        winner = check_winner(board)
        if winner:
            print(f"Player {winner} wins!")
            break
        player = 'O'
        row = int(input(f"Player {player}, enter row (0-2): "))
        col = int(input(f"Player {player}, enter col (0-2): "))
        if board[row][col] == ' ':
            board[row][col] = player
            winner = check_winner(board)
            if winner:
                print(f"Player {winner} wins!")
                break
        else:
            print("Cell already taken, try again.")

play_game_with_alpha_beta()
